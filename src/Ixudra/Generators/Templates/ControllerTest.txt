<?php


class ##CLASS_SINGULAR##ControllerTest extends BaseUnitTestCase {

    /**
     * @covers ##CLASS_SINGULAR##Controller::index()
     */
    public function testIndex()
    {
        $##VARIABLE_SINGULAR##ViewFactoryMock = Mockery::mock('##CLASS_SINGULAR##ViewFactory');
        $##VARIABLE_SINGULAR##ViewFactoryMock->shouldReceive('index')->once()->andReturn('factoryFoo');
        App::instance('##CLASS_SINGULAR##ViewFactory', $##VARIABLE_SINGULAR##ViewFactoryMock);

        $response = $this->call('GET', '##VARIABLE_PLURAL##');

        $this->assertTrue($response->isOk());
        $this->assertEquals('factoryFoo', $response->getContent());
    }

    /**
     * @covers ##CLASS_SINGULAR##Controller::filter()
     */
    public function testFilter()
    {
        $input = array(
            'Foo'       => 'Bar',
            '_token'    => 'Foz'
        );

        $expectedInput = array(
            'Foo'       => 'Bar'
        );

        $##VARIABLE_SINGULAR##ViewFactoryMock = Mockery::mock('##CLASS_SINGULAR##ViewFactory');
        $##VARIABLE_SINGULAR##ViewFactoryMock->shouldReceive('filter')->once()->with($expectedInput)->andReturn('factoryFoo');
        App::instance('##CLASS_SINGULAR##ViewFactory', $##VARIABLE_SINGULAR##ViewFactoryMock);

        $response = $this->call('POST', '##VARIABLE_PLURAL##/filter', $input);

        $this->assertTrue($response->isOk());
        $this->assertEquals('factoryFoo', $response->getContent());
    }

    /**
     * @covers ##CLASS_SINGULAR##Controller::create()
     */
    public function testCreate()
    {
        $##VARIABLE_SINGULAR##ViewFactoryMock = Mockery::mock('##CLASS_SINGULAR##ViewFactory');
        $##VARIABLE_SINGULAR##ViewFactoryMock->shouldReceive('create')->with(null)->once()->andReturn('factoryFoo');
        App::instance('##CLASS_SINGULAR##ViewFactory', $##VARIABLE_SINGULAR##ViewFactoryMock);

        $response = $this->call('GET', '##VARIABLE_PLURAL##/create');

        $this->assertTrue($response->isOk());
        $this->assertEquals('factoryFoo', $response->getContent());
    }

    /**
     * @covers ##CLASS_SINGULAR##Controller::store()
     */
    public function testStore()
    {
        $input = array(
            'Foo'           => 'Bar',
        );

        $user = new ##CLASS_SINGULAR##();

        $modelResponse = new BaseModelResponse($user, $input);
        $modelResponse->addNotifications('success', array('##VARIABLE_SINGULAR##.create.success'));

        $userFactoryMock = Mockery::mock('##CLASS_SINGULAR##Factory');
        $userFactoryMock->shouldReceive('createFromUserInput')->once()->with($input)->andReturn($modelResponse);
        App::instance('##CLASS_SINGULAR##Factory', $userFactoryMock);

        $userViewFactoryMock = Mockery::mock('##CLASS_SINGULAR##ViewFactory');
        $userViewFactoryMock->shouldReceive('notifyUser')->with('success', array('##VARIABLE_SINGULAR##.create.success'))->once();
        $userViewFactoryMock->shouldReceive('show')->with($user)->once()->andReturn('factoryFoo');
        App::instance('##CLASS_SINGULAR##ViewFactory', $userViewFactoryMock);

        $response = $this->call('POST', '##VARIABLE_PLURAL##', $input);

        $this->assertTrue($response->isOk());
        $this->assertEquals('factoryFoo', $response->getContent());
    }

    /**
     * @covers ##CLASS_SINGULAR##Controller::store()
     */
    public function testStore_returnsToCreatePageIfStoreReturnsErrors()
    {
        $input = array(
            'Foo'           => 'Bar',
        );

        $user = new ##CLASS_SINGULAR##();

        $modelResponse = new BaseModelResponse($user, $input);
        $modelResponse->addNotifications('error', array('##VARIABLE_SINGULAR##.create.error'));

        $##VARIABLE_SINGULAR##FactoryMock = Mockery::mock('##CLASS_SINGULAR##Factory');
        $##VARIABLE_SINGULAR##FactoryMock->shouldReceive('createFromUserInput')->once()->with($input)->andReturn($modelResponse);
        App::instance('##CLASS_SINGULAR##Factory', $##VARIABLE_SINGULAR##FactoryMock);

        $##VARIABLE_SINGULAR##ViewFactoryMock = Mockery::mock('##CLASS_SINGULAR##ViewFactory');
        $##VARIABLE_SINGULAR##ViewFactoryMock->shouldReceive('notifyUser')->with('error', array('##VARIABLE_SINGULAR##.create.error'))->once();
        $##VARIABLE_SINGULAR##ViewFactoryMock->shouldReceive('create')->with($input)->once()->andReturn('factoryFoo');
        App::instance('##CLASS_SINGULAR##ViewFactory', $##VARIABLE_SINGULAR##ViewFactoryMock);

        $response = $this->call('POST', '##VARIABLE_PLURAL##', $input);

        $this->assertTrue($response->isOk());
        $this->assertEquals('factoryFoo', $response->getContent());
    }

    /**
     * @covers ##CLASS_SINGULAR##Controller::show()
     */
    public function testShow()
    {
        $##VARIABLE_SINGULAR##RepositoryMock = Mockery::mock('Eloquent##CLASS_SINGULAR##Repository');
        $##VARIABLE_SINGULAR##RepositoryMock->shouldReceive('find')->with(1)->once()->andReturn('repositoryFoo');
        App::instance('Eloquent##CLASS_SINGULAR##Repository', $##VARIABLE_SINGULAR##RepositoryMock);

        $##VARIABLE_SINGULAR##ViewFactoryMock = Mockery::mock('##CLASS_SINGULAR##ViewFactory');
        $##VARIABLE_SINGULAR##ViewFactoryMock->shouldReceive('show')->with('repositoryFoo')->once()->andReturn('factoryFoo');
        App::instance('##CLASS_SINGULAR##ViewFactory', $##VARIABLE_SINGULAR##ViewFactoryMock);

        $response = $this->call('GET', '##VARIABLE_PLURAL##/1');

        $this->assertTrue($response->isOk());
        $this->assertEquals('factoryFoo', $response->getContent());
    }

    /**
     * @covers ##CLASS_SINGULAR##Controller::show()
     */
    public function testShow_returns##CLASS_SINGULAR##NotFoundIfRepositoryReturnsNull()
    {
        $##VARIABLE_SINGULAR##RepositoryMock = Mockery::mock('Eloquent##CLASS_SINGULAR##Repository');
        $##VARIABLE_SINGULAR##RepositoryMock->shouldReceive('find')->with(1)->once()->andReturn(null);
        App::instance('Eloquent##CLASS_SINGULAR##Repository', $##VARIABLE_SINGULAR##RepositoryMock);

        $##VARIABLE_SINGULAR##ViewFactoryMock = Mockery::mock('##CLASS_SINGULAR##ViewFactory');
        $##VARIABLE_SINGULAR##ViewFactoryMock->shouldReceive('##VARIABLE_SINGULAR##NotFound')->once()->andReturn('factoryFoo');
        App::instance('##CLASS_SINGULAR##ViewFactory', $##VARIABLE_SINGULAR##ViewFactoryMock);

        $response = $this->call('GET', '##VARIABLE_PLURAL##/1');

        $this->assertTrue($response->isOk());
        $this->assertEquals('factoryFoo', $response->getContent());
    }

    /**
     * @covers ##CLASS_SINGULAR##Controller::edit()
     */
    public function testEdit()
    {
        $##VARIABLE_SINGULAR##RepositoryMock = Mockery::mock('Eloquent##CLASS_SINGULAR##Repository');
        $##VARIABLE_SINGULAR##RepositoryMock->shouldReceive('find')->with(1)->once()->andReturn('repositoryFoo');
        App::instance('Eloquent##CLASS_SINGULAR##Repository', $##VARIABLE_SINGULAR##RepositoryMock);

        $##VARIABLE_SINGULAR##ViewFactoryMock = Mockery::mock('##CLASS_SINGULAR##ViewFactory');
        $##VARIABLE_SINGULAR##ViewFactoryMock->shouldReceive('edit')->with('repositoryFoo', null)->once()->andReturn('factoryFoo');
        App::instance('##CLASS_SINGULAR##ViewFactory', $##VARIABLE_SINGULAR##ViewFactoryMock);

        $response = $this->call('GET', '##VARIABLE_PLURAL##/1/edit');

        $this->assertTrue($response->isOk());
        $this->assertEquals('factoryFoo', $response->getContent());
    }

    /**
     * @covers ##CLASS_SINGULAR##Controller::edit()
     */
    public function testEdit_returns##CLASS_SINGULAR##NotFoundIfRepositoryReturnsNull()
    {
        $##VARIABLE_SINGULAR##RepositoryMock = Mockery::mock('Eloquent##CLASS_SINGULAR##Repository');
        $##VARIABLE_SINGULAR##RepositoryMock->shouldReceive('find')->with(1)->once()->andReturn(null);
        App::instance('Eloquent##CLASS_SINGULAR##Repository', $##VARIABLE_SINGULAR##RepositoryMock);

        $##VARIABLE_SINGULAR##ViewFactoryMock = Mockery::mock('##CLASS_SINGULAR##ViewFactory');
        $##VARIABLE_SINGULAR##ViewFactoryMock->shouldReceive('##VARIABLE_SINGULAR##NotFound')->once()->andReturn('factoryFoo');
        App::instance('##CLASS_SINGULAR##ViewFactory', $##VARIABLE_SINGULAR##ViewFactoryMock);

        $response = $this->call('GET', '##VARIABLE_PLURAL##/1/edit');

        $this->assertTrue($response->isOk());
        $this->assertEquals('factoryFoo', $response->getContent());
    }

    /**
     * @covers ##CLASS_SINGULAR##Controller::update()
     */
    public function testUpdate()
    {
        $input = array(
            'Foo'           => 'Bar'
        );

        $##VARIABLE_SINGULAR## = new ##CLASS_SINGULAR##();

        $modelResponse = new BaseModelResponse($##VARIABLE_SINGULAR##, $input);
        $modelResponse->addNotifications('success', array('##VARIABLE_SINGULAR##.edit.success'));

        $##VARIABLE_SINGULAR##RepositoryMock = Mockery::mock('Eloquent##CLASS_SINGULAR##Repository');
        $##VARIABLE_SINGULAR##RepositoryMock->shouldReceive('find')->with(1)->once()->andReturn($##VARIABLE_SINGULAR##);
        App::instance('Eloquent##CLASS_SINGULAR##Repository', $##VARIABLE_SINGULAR##RepositoryMock);

        $##VARIABLE_SINGULAR##FactoryMock = Mockery::mock('##CLASS_SINGULAR##Factory');
        $##VARIABLE_SINGULAR##FactoryMock->shouldReceive('modifyFromUserInput')->once()->with($##VARIABLE_SINGULAR##, $input)->andReturn($modelResponse);
        App::instance('##CLASS_SINGULAR##Factory', $##VARIABLE_SINGULAR##FactoryMock);

        $##VARIABLE_SINGULAR##ViewFactoryMock = Mockery::mock('##CLASS_SINGULAR##ViewFactory');
        $##VARIABLE_SINGULAR##ViewFactoryMock->shouldReceive('notifyUser')->with('success', array('##VARIABLE_SINGULAR##.edit.success'))->once();
        $##VARIABLE_SINGULAR##ViewFactoryMock->shouldReceive('show')->with($##VARIABLE_SINGULAR##)->once()->andReturn('factoryFoo');
        App::instance('##CLASS_SINGULAR##ViewFactory', $##VARIABLE_SINGULAR##ViewFactoryMock);

        $response = $this->call('PUT', '##VARIABLE_PLURAL##/1', $input);

        $this->assertTrue($response->isOk());
        $this->assertEquals('factoryFoo', $response->getContent());
    }

    /**
     * @covers ##CLASS_SINGULAR##Controller::update()
     */
    public function testUpdate_returns##CLASS_SINGULAR##NotFoundIfRepositoryReturnsNull()
    {
        $input = array(
            'Foo'           => 'Bar'
        );

        $##VARIABLE_SINGULAR##RepositoryMock = Mockery::mock('Eloquent##CLASS_SINGULAR##Repository');
        $##VARIABLE_SINGULAR##RepositoryMock->shouldReceive('find')->with(1)->once()->andReturn(null);
        App::instance('Eloquent##CLASS_SINGULAR##Repository', $##VARIABLE_SINGULAR##RepositoryMock);

        $##VARIABLE_SINGULAR##ViewFactoryMock = Mockery::mock('##CLASS_SINGULAR##ViewFactory');
        $##VARIABLE_SINGULAR##ViewFactoryMock->shouldReceive('##VARIABLE_SINGULAR##NotFound')->once()->andReturn('factoryFoo');
        App::instance('##CLASS_SINGULAR##ViewFactory', $##VARIABLE_SINGULAR##ViewFactoryMock);

        $response = $this->call('PUT', '##VARIABLE_PLURAL##/1', $input);

        $this->assertTrue($response->isOk());
        $this->assertEquals('factoryFoo', $response->getContent());
    }

    /**
     * @covers ##CLASS_SINGULAR##Controller::update()
     */
    public function testUpdate_returnsToEditPageIfModifyReturnsErrors()
    {
        $input = array(
            'Foo'           => 'Bar'
        );

        $##VARIABLE_SINGULAR## = new ##CLASS_SINGULAR##();

        $modelResponse = new BaseModelResponse($##VARIABLE_SINGULAR##, $input);
        $modelResponse->addNotifications('error', array('##VARIABLE_SINGULAR##.edit.error'));

        $##VARIABLE_SINGULAR##RepositoryMock = Mockery::mock('Eloquent##CLASS_SINGULAR##Repository');
        $##VARIABLE_SINGULAR##RepositoryMock->shouldReceive('find')->with(1)->once()->andReturn($##VARIABLE_SINGULAR##);
        App::instance('Eloquent##CLASS_SINGULAR##Repository', $##VARIABLE_SINGULAR##RepositoryMock);

        $##VARIABLE_SINGULAR##FactoryMock = Mockery::mock('##CLASS_SINGULAR##Factory');
        $##VARIABLE_SINGULAR##FactoryMock->shouldReceive('modifyFromUserInput')->once()->with($##VARIABLE_SINGULAR##, $input)->andReturn($modelResponse);
        App::instance('##CLASS_SINGULAR##Factory', $##VARIABLE_SINGULAR##FactoryMock);

        $##VARIABLE_SINGULAR##ViewFactoryMock = Mockery::mock('##CLASS_SINGULAR##ViewFactory');
        $##VARIABLE_SINGULAR##ViewFactoryMock->shouldReceive('notifyUser')->with('error', array('##VARIABLE_SINGULAR##.edit.error'))->once();
        $##VARIABLE_SINGULAR##ViewFactoryMock->shouldReceive('edit')->with($##VARIABLE_SINGULAR##, $input)->once()->andReturn('factoryFoo');
        App::instance('##CLASS_SINGULAR##ViewFactory', $##VARIABLE_SINGULAR##ViewFactoryMock);

        $response = $this->call('PUT', '##VARIABLE_PLURAL##/1', $input);

        $this->assertTrue($response->isOk());
        $this->assertEquals('factoryFoo', $response->getContent());
    }

    /**
     * @covers ##CLASS_SINGULAR##Controller::destroy()
     */
    public function testDestroy()
    {
        $##VARIABLE_SINGULAR##Mock = Mockery::mock('##CLASS_SINGULAR##');

        $modelResponse = new BaseModelResponse($##VARIABLE_SINGULAR##Mock);
        $modelResponse->addNotifications('success', array('##VARIABLE_SINGULAR##.delete.success'));

        $##VARIABLE_SINGULAR##Mock->shouldReceive('remove')->once()->andReturn($modelResponse);

        $##VARIABLE_SINGULAR##RepositoryMock = Mockery::mock('Eloquent##CLASS_SINGULAR##Repository');
        $##VARIABLE_SINGULAR##RepositoryMock->shouldReceive('find')->with(1)->once()->andReturn($##VARIABLE_SINGULAR##Mock);
        App::instance('Eloquent##CLASS_SINGULAR##Repository', $##VARIABLE_SINGULAR##RepositoryMock);

        $##VARIABLE_SINGULAR##ViewFactoryMock = Mockery::mock('##CLASS_SINGULAR##ViewFactory');
        $##VARIABLE_SINGULAR##ViewFactoryMock->shouldReceive('notifyUser')->with('success', array('##VARIABLE_SINGULAR##.delete.success'))->once();
        $##VARIABLE_SINGULAR##ViewFactoryMock->shouldReceive('index')->once()->andReturn('factoryFoo');
        App::instance('##CLASS_SINGULAR##ViewFactory', $##VARIABLE_SINGULAR##ViewFactoryMock);

        $response = $this->call('DELETE', '##VARIABLE_PLURAL##/1');

        $this->assertTrue($response->isOk());
        $this->assertEquals('factoryFoo', $response->getContent());
    }

    /**
     * @covers ##CLASS_SINGULAR##Controller::destroy()
     */
    public function testDestroy_returnsToIndexIf##CLASS_SINGULAR##IsNotFound()
    {
        $##VARIABLE_SINGULAR##RepositoryMock = Mockery::mock('Eloquent##CLASS_SINGULAR##Repository');
        $##VARIABLE_SINGULAR##RepositoryMock->shouldReceive('find')->with(1)->once()->andReturn(null);
        App::instance('Eloquent##CLASS_SINGULAR##Repository', $##VARIABLE_SINGULAR##RepositoryMock);

        $##VARIABLE_SINGULAR##ViewFactoryMock = Mockery::mock('##CLASS_SINGULAR##ViewFactory');
        $##VARIABLE_SINGULAR##ViewFactoryMock->shouldReceive('##VARIABLE_SINGULAR##NotFound')->once()->andReturn('factoryFoo');
        App::instance('##CLASS_SINGULAR##ViewFactory', $##VARIABLE_SINGULAR##ViewFactoryMock);

        $response = $this->call('DELETE', '##VARIABLE_PLURAL##/1');

        $this->assertTrue($response->isOk());
        $this->assertEquals('factoryFoo', $response->getContent());
    }

    /**
     * @covers ##CLASS_SINGULAR##Controller::destroy()
     */
    public function testDestroy_returnsToShowIfRemoveReturnsErrors()
    {
        $##VARIABLE_SINGULAR##Mock = Mockery::mock('##CLASS_SINGULAR##');

        $modelResponse = new BaseModelResponse($##VARIABLE_SINGULAR##Mock);
        $modelResponse->addNotifications('error', array('##VARIABLE_SINGULAR##.delete.error'));

        $##VARIABLE_SINGULAR##Mock->shouldReceive('remove')->once()->andReturn($modelResponse);

        $##VARIABLE_SINGULAR##RepositoryMock = Mockery::mock('Eloquent##CLASS_SINGULAR##Repository');
        $##VARIABLE_SINGULAR##RepositoryMock->shouldReceive('find')->with(1)->once()->andReturn($##VARIABLE_SINGULAR##Mock);
        App::instance('Eloquent##CLASS_SINGULAR##Repository', $##VARIABLE_SINGULAR##RepositoryMock);

        $##VARIABLE_SINGULAR##ViewFactoryMock = Mockery::mock('##CLASS_SINGULAR##ViewFactory');
        $##VARIABLE_SINGULAR##ViewFactoryMock->shouldReceive('notifyUser')->with('error', array('##VARIABLE_SINGULAR##.delete.error'))->once();
        $##VARIABLE_SINGULAR##ViewFactoryMock->shouldReceive('show')->once()->with($##VARIABLE_SINGULAR##Mock)->andReturn('factoryFoo');
        App::instance('##CLASS_SINGULAR##ViewFactory', $##VARIABLE_SINGULAR##ViewFactoryMock);

        $response = $this->call('DELETE', '##VARIABLE_PLURAL##/1');

        $this->assertTrue($response->isOk());
        $this->assertEquals('factoryFoo', $response->getContent());
    }

}