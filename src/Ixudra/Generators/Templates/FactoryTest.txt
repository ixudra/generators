<?php


class ##CLASS_SINGULAR##FactoryTest extends BaseFunctionalTestCase {

    protected $##VARIABLE_SINGULAR##Factory;


    public function setUp()
    {
        parent::setUp();

        $this->##VARIABLE_SINGULAR##Factory = new ##CLASS_SINGULAR##Factory();
    }


    /**
     * @covers ##CLASS_SINGULAR##Factory::createFromUserInput()
     * @covers ##CLASS_SINGULAR##Factory::preProcessInput()
     */
    public function testCreateFromUserInput()
    {
        $this->truncateTables('##VARIABLE_PLURAL##');

        $input = array(
            'name'          => 'Foo'
        );

        $processInput = array(
            'name'          => 'Foo'
        );

        $##VARIABLE_SINGULAR##ValidatorMock = Mockery::mock('##CLASS_SINGULAR##Validator');
        $##VARIABLE_SINGULAR##ValidatorMock->shouldReceive('setAttributes')->once()->with($processInput)->andReturn(false);
        $##VARIABLE_SINGULAR##ValidatorMock->shouldReceive('fails')->once()->andReturn(false);
        App::instance('##CLASS_SINGULAR##Validator', $##VARIABLE_SINGULAR##ValidatorMock);

        $##VARIABLE_SINGULAR##Response = $this->##VARIABLE_SINGULAR##Factory->createFromUserInput( $input );

        $this->assertTrue( $##VARIABLE_SINGULAR##Response->isSuccessful() );
        $##VARIABLE_SINGULAR##Repository = App::make('Eloquent##CLASS_SINGULAR##Repository');
        $this->assertEquals( 1, $##VARIABLE_SINGULAR##Repository->all()->count() );
        $##VARIABLE_SINGULAR## = $##VARIABLE_SINGULAR##Response->getModel();
        $this->assertInstanceOf( '##CLASS_SINGULAR##', $##VARIABLE_SINGULAR##);
    }


    /**
     * @covers ##CLASS_SINGULAR##Factory::createFromUserInput()
     * @covers ##CLASS_SINGULAR##Factory::preProcessInput()
     */
    public function testCreateFromUserInput_no##CLASS_SINGULAR##CreatedIfErrorOccurs()
    {
        $this->truncateTables('##VARIABLE_PLURAL##');

        $input = array(
            'name'          => 'Foo'
        );

        $##VARIABLE_SINGULAR##ValidatorMock = Mockery::mock('##CLASS_SINGULAR##Validator');
        $##VARIABLE_SINGULAR##ValidatorMock->shouldReceive('setAttributes')->once()->with($input)->andReturn(false);
        $##VARIABLE_SINGULAR##ValidatorMock->shouldReceive('fails')->once()->andReturn(true);
        $##VARIABLE_SINGULAR##ValidatorMock->shouldReceive('getErrors')->once()->andReturn(array( 'Foo', 'Bar' ));
        App::instance('##CLASS_SINGULAR##Validator', $##VARIABLE_SINGULAR##ValidatorMock);

        $##VARIABLE_SINGULAR##Response = $this->##VARIABLE_SINGULAR##Factory->createFromUserInput( $input );

        $this->assertFalse( $##VARIABLE_SINGULAR##Response->isSuccessful() );
        $##VARIABLE_SINGULAR##Repository = App::make('Eloquent##CLASS_SINGULAR##Repository');
        $this->assertEquals( 0, $##VARIABLE_SINGULAR##Repository->all()->count() );
    }

    /**
     * @covers ##CLASS_SINGULAR##Factory::modifyFromUserInput()
     * @covers ##CLASS_SINGULAR##Factory::preProcessInput()
     */
    public function testModifyFromUserInput()
    {
        $this->truncateTables('##VARIABLE_PLURAL##');

        $##VARIABLE_SINGULAR## = $this->create##CLASS_SINGULAR##(
            array(
                'name'      => 'Foo'
            )
        );

        $input = array(
            'name'          => 'Bar'
        );

        $processInput = array(
            'name'          => 'Bar'
        );

        $##VARIABLE_SINGULAR##ValidatorMock = Mockery::mock('##CLASS_SINGULAR##Validator');
        $##VARIABLE_SINGULAR##ValidatorMock->shouldReceive('setAttributes')->once()->with($processInput)->andReturn(false);
        $##VARIABLE_SINGULAR##ValidatorMock->shouldReceive('fails')->once()->andReturn(false);
        App::instance('##CLASS_SINGULAR##Validator', $##VARIABLE_SINGULAR##ValidatorMock);

        $##VARIABLE_SINGULAR##Response = $this->##VARIABLE_SINGULAR##Factory->modifyFromUserInput( $##VARIABLE_SINGULAR##, $input );

        $this->assertTrue( $##VARIABLE_SINGULAR##Response->isSuccessful() );
        $##VARIABLE_SINGULAR## = $##VARIABLE_SINGULAR##Response->getModel();
        $this->assertEquals( 'Bar', $##VARIABLE_SINGULAR##->name );
    }

    /**
     * @covers ##CLASS_SINGULAR##Factory::modifyFromUserInput()
     * @covers ##CLASS_SINGULAR##Factory::preProcessInput()
     */
    public function testModifyFromUserInput_noModificationsIfErrorOccurs()
    {
        $this->truncateTables('##VARIABLE_PLURAL##');

        $##VARIABLE_SINGULAR## = $this->create##CLASS_SINGULAR##(
            array(
                'name'      => 'Foo'
            )
        );

        $input = array(
            'name'          => 'Bar'
        );

        $processInput = array(
            'name'          => 'Bar'
        );

        $##VARIABLE_SINGULAR##ValidatorMock = Mockery::mock('##CLASS_SINGULAR##Validator');
        $##VARIABLE_SINGULAR##ValidatorMock->shouldReceive('setAttributes')->once()->with($processInput)->andReturn(false);
        $##VARIABLE_SINGULAR##ValidatorMock->shouldReceive('fails')->once()->andReturn(true);
        $##VARIABLE_SINGULAR##ValidatorMock->shouldReceive('getErrors')->once()->andReturn(array( 'Foo', 'Bar' ));
        App::instance('##CLASS_SINGULAR##Validator', $##VARIABLE_SINGULAR##ValidatorMock);

        $##VARIABLE_SINGULAR##Response = $this->##VARIABLE_SINGULAR##Factory->modifyFromUserInput( $##VARIABLE_SINGULAR##, $input );

        $this->assertFalse( $##VARIABLE_SINGULAR##Response->isSuccessful() );
        $##VARIABLE_SINGULAR## = $##VARIABLE_SINGULAR##Response->getModel();
        $this->assertEquals( 'Foo', $##VARIABLE_SINGULAR##->name );
    }


    protected function create##CLASS_SINGULAR##($data)
    {
        $##VARIABLE_SINGULAR## = new ##CLASS_SINGULAR##( $data );
        $##VARIABLE_SINGULAR##->forceSave();

        return $##VARIABLE_SINGULAR##;
    }

}