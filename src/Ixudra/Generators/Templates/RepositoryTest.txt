<?php


class Eloquent##CLASS_SINGULAR##RepositoryTest extends BaseRepositoryTestCase {

    protected $##VARIABLE_SINGULAR##Repository;


    public function setUp()
    {
        parent::setUp();

        $this->truncateTables('##VARIABLE_PLURAL##');

        $this->##VARIABLE_SINGULAR##Repository = new Eloquent##CLASS_SINGULAR##Repository();
    }


    /**
     * @covers Eloquent##CLASS_SINGULAR##Repository::all()
     */
    public function testAll()
    {
        $##VARIABLE_SINGULAR##1 = $this->create##CLASS_SINGULAR##( array('user_id' => 1) );
        $##VARIABLE_SINGULAR##2 = $this->create##CLASS_SINGULAR##( array('user_id' => 2) );
        $##VARIABLE_SINGULAR##3 = $this->create##CLASS_SINGULAR##( array('user_id' => 3) );
        $##VARIABLE_SINGULAR##4 = $this->create##CLASS_SINGULAR##( array('user_id' => 4) );
        $##VARIABLE_SINGULAR##5 = $this->create##CLASS_SINGULAR##( array('user_id' => 5) );

        $##VARIABLE_PLURAL## = $this->##VARIABLE_SINGULAR##Repository->all();

        $this->assertCount(5, $##VARIABLE_PLURAL##);
        $this->assertContainsOnlyInstancesOf('##CLASS_SINGULAR##', $##VARIABLE_PLURAL##);
    }

    /**
     * @covers Eloquent##CLASS_SINGULAR##Repository::find()
     */
    public function testFind()
    {
        $##VARIABLE_SINGULAR## = $this->create##CLASS_SINGULAR##( array('user_id' => 1) );

        $result = $this->##VARIABLE_SINGULAR##Repository->find($##VARIABLE_SINGULAR##->id);

        $this->assertInstanceOf('##CLASS_SINGULAR##', $result);
        $this->assertEquals(1, $result->user_id);
    }

    /**
     * @covers Eloquent##CLASS_SINGULAR##Repository::find()
     */
    public function testFind_returnsNullIf##CLASS_SINGULAR##DoesNotExist()
    {
        $result = $this->##VARIABLE_SINGULAR##Repository->find(100);

        $this->assertNull($result);
    }

    /**
     * @covers Eloquent##CLASS_SINGULAR##Repository::findByFilter()
     * @covers BaseRepository::preProcessFilters()
     * @covers BaseRepository::applyFilters()
     */
    public function testFindByFilter()
    {
        $##VARIABLE_SINGULAR##1 = $this->create##CLASS_SINGULAR##( array('user_id' => 1) );
        $##VARIABLE_SINGULAR##2 = $this->create##CLASS_SINGULAR##( array('user_id' => 2) );
        $##VARIABLE_SINGULAR##3 = $this->create##CLASS_SINGULAR##( array('user_id' => 1) );
        $##VARIABLE_SINGULAR##4 = $this->create##CLASS_SINGULAR##( array('user_id' => 2) );
        $##VARIABLE_SINGULAR##5 = $this->create##CLASS_SINGULAR##( array('user_id' => 3) );

        $filter = array('user_id' => 2);

        $##VARIABLE_PLURAL## = $this->##VARIABLE_SINGULAR##Repository->findByFilter($filter);

        $this->assertCount(2, $##VARIABLE_PLURAL##);
        $this->assertCollectionWithOnlyInstancesOf('##CLASS_SINGULAR##', $##VARIABLE_PLURAL##);
        $this->assertCollectionContains( array($##VARIABLE_SINGULAR##2, $##VARIABLE_SINGULAR##4), $##VARIABLE_PLURAL## );
    }

    /**
     * @covers Eloquent##CLASS_SINGULAR##Repository::findByFilter()
     * @covers BaseRepository::preProcessFilters()
     * @covers BaseRepository::applyFilters()
     */
    public function testFindByFilter_returnsEmptyArrayIfNo##CLASS_PLURAL##MatchFilter()
    {
        $##VARIABLE_SINGULAR##1 = $this->create##CLASS_SINGULAR##( array('user_id' => 1 ) );
        $##VARIABLE_SINGULAR##2 = $this->create##CLASS_SINGULAR##( array('user_id' => 2 ) );

        $filter = array('user_id' => 3);

        $##VARIABLE_PLURAL## = $this->##VARIABLE_SINGULAR##Repository->findByFilter($filter);

        $this->assertCount(0, $##VARIABLE_PLURAL##);
    }

}
