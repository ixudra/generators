<?php


class ##CLASS_SINGULAR##ViewFactoryTest extends BaseViewFactoryTestCase {

    protected $##VARIABLE_SINGULAR##ViewFactory;


    public function setUp()
    {
        parent::setUp();

        $this->##VARIABLE_SINGULAR##ViewFactory = App::make('##CLASS_SINGULAR##ViewFactory');
    }


    /**
     * @covers ##CLASS_SINGULAR##ViewFactory::index()
     * @covers BaseViewFactory::addParameter()
     * @covers BaseViewFactory::makeView()
     */
    public function testIndex()
    {
        $##VARIABLE_SINGULAR##1 = new ##CLASS_SINGULAR##( array('name' => 'Foo') );
        $##VARIABLE_SINGULAR##2 = new ##CLASS_SINGULAR##( array('name' => 'Bar') );
        $##VARIABLE_PLURAL## = new \Illuminate\Support\Collection( array($##VARIABLE_SINGULAR##1, $##VARIABLE_SINGULAR##2) );

        $##VARIABLE_SINGULAR##RepositoryMock = Mockery::mock('Eloquent##CLASS_SINGULAR##Repository');
        $##VARIABLE_SINGULAR##RepositoryMock->shouldReceive('all')->once()->andReturn($##VARIABLE_PLURAL##);
        App::instance('Eloquent##CLASS_SINGULAR##Repository', $##VARIABLE_SINGULAR##RepositoryMock);

        $view = $this->##VARIABLE_SINGULAR##ViewFactory->index();

        $this->assertViewName( $view, 'bootstrap.##VARIABLE_PLURAL##.index' );
        $this->assertViewData( $view, 'messageType', '' );
        $this->assertViewData( $view, 'messageValues', array() );
        $this->assertViewDataSize( $view, '##VARIABLE_PLURAL##', 2 );
        $this->assertEquals( 'Foo', $view['##VARIABLE_PLURAL##'][0]->name );
        $this->assertEquals( 'Bar', $view['##VARIABLE_PLURAL##'][1]->name );
    }

    /**
     * @covers ##CLASS_SINGULAR##ViewFactory::create()
     * @covers ##CLASS_SINGULAR##ViewFactory::prepareForm()
     * @covers BaseViewFactory::addParameter()
     * @covers BaseViewFactory::makeView()
     */
    public function testCreate_usesInputIfInputIsNotNull()
    {
        $view = $this->##VARIABLE_SINGULAR##ViewFactory->create('Foo');

        $this->assertViewName( $view, 'bootstrap.##VARIABLE_PLURAL##.create' );
        $this->assertViewData( $view, 'input', 'Foo' );
    }

    /**
     * @covers ##CLASS_SINGULAR##ViewFactory::create()
     * @covers ##CLASS_SINGULAR##ViewFactory::prepareForm()
     * @covers BaseViewFactory::addParameter()
     * @covers BaseViewFactory::makeView()
     */
    public function testCreate_usesDefaultValuesIfInputIsNull()
    {
        $##VARIABLE_SINGULAR##InputHelperMock = Mockery::mock('##CLASS_SINGULAR##InputHelper');
        $##VARIABLE_SINGULAR##InputHelperMock->shouldReceive('getDefaultInput')->once()->andReturn('Foo');
        App::instance('##CLASS_SINGULAR##InputHelper', $##VARIABLE_SINGULAR##InputHelperMock);

        $view = $this->##VARIABLE_SINGULAR##ViewFactory->create(null);

        $this->assertViewName( $view, 'bootstrap.##VARIABLE_PLURAL##.create' );
        $this->assertViewData( $view, 'input', 'Foo' );
    }

    /**
     * @covers ##CLASS_SINGULAR##ViewFactory::show()
     * @covers BaseViewFactory::addParameter()
     * @covers BaseViewFactory::makeView()
     */
    public function testShow()
    {
        $##VARIABLE_SINGULAR## = new ##CLASS_SINGULAR##( array('name' => 'Foo') );

        $view = $this->##VARIABLE_SINGULAR##ViewFactory->show($##VARIABLE_SINGULAR##);

        $this->assertViewName( $view, 'bootstrap.##VARIABLE_PLURAL##.show' );
        $this->assertViewData( $view, '##VARIABLE_SINGULAR##', $##VARIABLE_SINGULAR## );
        $this->assertEquals( 'Foo', $view['##VARIABLE_SINGULAR##']->name );
    }

    /**
     * @covers ##CLASS_SINGULAR##ViewFactory::edit()
     * @covers ##CLASS_SINGULAR##ViewFactory::prepareForm()
     * @covers BaseViewFactory::addParameter()
     * @covers BaseViewFactory::makeView()
     */
    public function testEdit_usesInputValuesIfInputIsNotNull()
    {
        $##VARIABLE_SINGULAR## = new ##CLASS_SINGULAR##( array('name' => 'Foo') );

        $##VARIABLE_SINGULAR##InputHelperMock = Mockery::mock('##CLASS_SINGULAR##InputHelper');
        $##VARIABLE_SINGULAR##InputHelperMock->shouldReceive('getInputForModel')->once()->andReturn('Bar');
        App::instance('##CLASS_SINGULAR##InputHelper', $##VARIABLE_SINGULAR##InputHelperMock);

        $view = $this->##VARIABLE_SINGULAR##ViewFactory->edit($##VARIABLE_SINGULAR##, 'Bar');

        $this->assertViewName( $view, 'bootstrap.##VARIABLE_PLURAL##.edit' );
        $this->assertViewData( $view, '##VARIABLE_SINGULAR##', $##VARIABLE_SINGULAR## );
        $this->assertViewData( $view, 'input', 'Bar' );
    }

    /**
     * @covers ##CLASS_SINGULAR##ViewFactory::edit()
     * @covers ##CLASS_SINGULAR##ViewFactory::prepareForm()
     * @covers BaseViewFactory::addParameter()
     * @covers BaseViewFactory::makeView()
     */
    public function testEdit_uses##CLASS_SINGULAR##ValuesIfInputIsNull()
    {
        $##VARIABLE_SINGULAR##InputHelperMock = Mockery::mock('##CLASS_SINGULAR##InputHelper');
        $##VARIABLE_SINGULAR##InputHelperMock->shouldReceive('getInputForModel')->once()->andReturn('Bar');
        App::instance('##CLASS_SINGULAR##InputHelper', $##VARIABLE_SINGULAR##InputHelperMock);

        $##VARIABLE_SINGULAR## = new ##CLASS_SINGULAR##( array('name' => 'Bar') );

        $view = $this->##VARIABLE_SINGULAR##ViewFactory->edit($##VARIABLE_SINGULAR##, null);

        $this->assertViewName( $view, 'bootstrap.##VARIABLE_PLURAL##.edit' );
        $this->assertViewData( $view, '##VARIABLE_SINGULAR##', $##VARIABLE_SINGULAR## );
        $this->assertViewData( $view, 'input', 'Bar');
    }

    /**
     * @covers ##CLASS_SINGULAR##ViewFactory::##VARIABLE_SINGULAR##NotFound()
     * @covers ##CLASS_SINGULAR##ViewFactory::notifyUser()
     * @covers BaseViewFactory::addParameter()
     * @covers BaseViewFactory::makeView()
     */
    public function test##CLASS_SINGULAR##NotFound()
    {
        $##VARIABLE_SINGULAR##RepositoryMock = Mockery::mock('Eloquent##CLASS_SINGULAR##Repository');
        $##VARIABLE_SINGULAR##RepositoryMock->shouldReceive('all')->once()->andReturn('Foo');
        App::instance('Eloquent##CLASS_SINGULAR##Repository', $##VARIABLE_SINGULAR##RepositoryMock);

        $view = $this->##VARIABLE_SINGULAR##ViewFactory->##VARIABLE_SINGULAR##NotFound();

        $this->assertViewName( $view, 'bootstrap.##VARIABLE_PLURAL##.index' );
        $this->assertViewData( $view, 'messageType', 'error' );
        $this->assertViewData( $view, 'messageValues', array('This ##VARIABLE_SINGULAR## cannot be found in the database.') );
        $this->assertViewData( $view, '##VARIABLE_PLURAL##', 'Foo' );
    }

}