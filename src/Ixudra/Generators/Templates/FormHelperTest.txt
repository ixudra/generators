<?php


class ##CLASS_SINGULAR##FormHelperTest extends BaseUnitTestCase {

    const ##CONSTANT_SINGULAR##_ID_1 = 15;

    const ##CONSTANT_SINGULAR##_ID_2 = 17;


    protected $##VARIABLE_SINGULAR##FormHelper;


    public function setUp()
    {
        parent::setUp();

        $this->##VARIABLE_SINGULAR##FormHelper = App::make('##CLASS_SINGULAR##FormHelper');
    }


    /**
     * @covers ##CLASS_SINGULAR##FormHelper::get##CLASS_PLURAL##AsSelectList()
     */
    public function testGet##CLASS_PLURAL##AsSelectList()
    {
        $this->setUpMocks();

        $result = $this->##VARIABLE_SINGULAR##FormHelper->get##CLASS_PLURAL##AsSelectList();

        $this->assertEquals(
            array(
                self::##CONSTANT_SINGULAR##_ID_1     => 'Foo',
                self::##CONSTANT_SINGULAR##_ID_2     => 'Bar'
            ), $result
        );
    }

    /**
     * @covers ##CLASS_SINGULAR##FormHelper::get##CLASS_PLURAL##AsSelectList()
     */
    public function testGet##CLASS_PLURAL##AsSelectList_includesNullValueIfRequired()
    {
        $this->setUpMocks();

        $result = $this->##VARIABLE_SINGULAR##FormHelper->get##CLASS_PLURAL##AsSelectList(true);

        $this->assertEquals(
            array(
                0                                    => 'Choose ...',
                self::##CONSTANT_SINGULAR##_ID_1     => 'Foo',
                self::##CONSTANT_SINGULAR##_ID_2     => 'Bar'
            ), $result
        );
    }


    protected function setUpMocks()
    {
        $##VARIABLE_SINGULAR##1 = new ##CLASS_SINGULAR##();
        $##VARIABLE_SINGULAR##1->id = self::##CONSTANT_SINGULAR##_ID_1;
        $##VARIABLE_SINGULAR##1->name = 'Foo';

        $##VARIABLE_SINGULAR##2 = new ##CLASS_SINGULAR##();
        $##VARIABLE_SINGULAR##2->id = self::##CONSTANT_SINGULAR##_ID_2;
        $##VARIABLE_SINGULAR##2->name = 'Bar';

        $##VARIABLE_PLURAL## = new \Illuminate\Support\Collection( array( $##VARIABLE_SINGULAR##1, $##VARIABLE_SINGULAR##2 ) );

        $##VARIABLE_SINGULAR##Repository = Mockery::mock('Eloquent##CLASS_SINGULAR##Repository');
        $##VARIABLE_SINGULAR##Repository->shouldReceive('all')->once()->andReturn($##VARIABLE_PLURAL##);
        App::instance('Eloquent##CLASS_SINGULAR##Repository', $##VARIABLE_SINGULAR##Repository);
    }

}