<?php


use ##NAMESPACE##\Models\##CLASS_SINGULAR##;

class ##CLASS_SINGULAR##ViewFactoryTest extends BaseViewFactoryTestCase {

    protected $##VARIABLE_SINGULAR##ViewFactory;


    public function setUp()
    {
        parent::setUp();

        $this->##VARIABLE_SINGULAR##ViewFactory = App::make('\##NAMESPACE##\Services\Html\##CLASS_SINGULAR##ViewFactory');
    }


    /**
     * @covers \##NAMESPACE##\Services\Html\##CLASS_SINGULAR##ViewFactory::index()
     * @covers \##NAMESPACE##\Services\Html\##CLASS_SINGULAR##ViewFactory::prepareFilter()
     * @covers \##NAMESPACE##\Services\Html\BaseViewFactory::addParameter()
     * @covers \##NAMESPACE##\Services\Html\BaseViewFactory::makeView()
     */
    public function testIndex()
    {
        $input = array(
            'name'          => ''
        );

        $this->createFilterMocks( $input );

        $view = $this->##VARIABLE_SINGULAR##ViewFactory->index();

        $this->assertViewName( $view, 'bootstrap.##VARIABLE_PLURAL##.index' );

        $this->assertFilterMocks( $view, $input );
    }

    /**
     * @covers \##NAMESPACE##\Services\Html\##CLASS_SINGULAR##ViewFactory::create()
     * @covers \##NAMESPACE##\Services\Html\##CLASS_SINGULAR##ViewFactory::prepareForm()
     * @covers \##NAMESPACE##\Services\Html\BaseViewFactory::addParameter()
     * @covers \##NAMESPACE##\Services\Html\BaseViewFactory::makeView()
     */
    public function testCreate_usesInputIfInputIsNotNull()
    {
        $this->createFormMocks();

        $view = $this->##VARIABLE_SINGULAR##ViewFactory->create('Foo');

        $this->assertViewName( $view, 'bootstrap.##VARIABLE_PLURAL##.create' );
        $this->assertViewData( $view, 'input', 'Foo' );
        $this->assertFormMocks( $view );
    }

    /**
     * @covers \##NAMESPACE##\Services\Html\##CLASS_SINGULAR##ViewFactory::create()
     * @covers \##NAMESPACE##\Services\Html\##CLASS_SINGULAR##ViewFactory::prepareForm()
     * @covers \##NAMESPACE##\Services\Html\BaseViewFactory::addParameter()
     * @covers \##NAMESPACE##\Services\Html\BaseViewFactory::makeView()
     */
    public function testCreate_usesDefaultValuesIfInputIsNull()
    {
        $##VARIABLE_SINGULAR##InputHelperMock = Mockery::mock('\##NAMESPACE##\Services\Input\##CLASS_SINGULAR##InputHelper');
        $##VARIABLE_SINGULAR##InputHelperMock->shouldReceive('getDefaultInput')->once()->andReturn('Foo');
        App::instance('\##NAMESPACE##\Services\Input\##CLASS_SINGULAR##InputHelper', $##VARIABLE_SINGULAR##InputHelperMock);

        $this->createFormMocks();

        $view = $this->##VARIABLE_SINGULAR##ViewFactory->create( null );

        $this->assertViewName( $view, 'bootstrap.##VARIABLE_PLURAL##.create' );
        $this->assertViewData( $view, 'input', 'Foo' );
        $this->assertFormMocks( $view );
    }

    /**
     * @covers \##NAMESPACE##\Services\Html\##CLASS_SINGULAR##ViewFactory::show()
     * @covers \##NAMESPACE##\Services\Html\BaseViewFactory::addParameter()
     * @covers \##NAMESPACE##\Services\Html\BaseViewFactory::makeView()
     */
    public function testShow()
    {
        $##VARIABLE_SINGULAR## = new ##CLASS_SINGULAR##( array(  'name' => 'Foo' ) );

        $view = $this->##VARIABLE_SINGULAR##ViewFactory->show($##VARIABLE_SINGULAR##);

        $this->assertViewName( $view, 'bootstrap.##VARIABLE_PLURAL##.show' );
        $this->assertViewData( $view, '##VARIABLE_SINGULAR##', $##VARIABLE_SINGULAR## );
        $this->assertEquals( 'Foo', $view['##VARIABLE_SINGULAR##']->name );
    }

    /**
     * @covers \##NAMESPACE##\Services\Html\##CLASS_SINGULAR##ViewFactory::edit()
     * @covers \##NAMESPACE##\Services\Html\##CLASS_SINGULAR##ViewFactory::prepareForm()
     * @covers \##NAMESPACE##\Services\Html\BaseViewFactory::addParameter()
     * @covers \##NAMESPACE##\Services\Html\BaseViewFactory::makeView()
     */
    public function testEdit_usesInputValuesIfInputIsNotNull()
    {
        $##VARIABLE_SINGULAR## = new ##CLASS_SINGULAR##( array( 'name' => 'Foo' ) );

        $this->createFormMocks();

        $view = $this->##VARIABLE_SINGULAR##ViewFactory->edit($##VARIABLE_SINGULAR##, 'Bar');

        $this->assertViewName( $view, 'bootstrap.##VARIABLE_PLURAL##.edit' );
        $this->assertViewData( $view, '##VARIABLE_SINGULAR##', $##VARIABLE_SINGULAR## );
        $this->assertViewData( $view, 'input', 'Bar' );
        $this->assertFormMocks( $view );
    }

    /**
     * @covers \##NAMESPACE##\Services\Html\##CLASS_SINGULAR##ViewFactory::edit()
     * @covers \##NAMESPACE##\Services\Html\##CLASS_SINGULAR##ViewFactory::prepareForm()
     * @covers \##NAMESPACE##\Services\Html\BaseViewFactory::addParameter()
     * @covers \##NAMESPACE##\Services\Html\BaseViewFactory::makeView()
     */
    public function testEdit_uses##CLASS_SINGULAR##ValuesIfInputIsNull()
    {
        $##VARIABLE_SINGULAR##InputHelperMock = Mockery::mock('\##NAMESPACE##\Services\Input\##CLASS_SINGULAR##InputHelper');
        $##VARIABLE_SINGULAR##InputHelperMock->shouldReceive('getInputForModel')->once()->andReturn('Bar');
        App::instance('\##NAMESPACE##\Services\Input\##CLASS_SINGULAR##InputHelper', $##VARIABLE_SINGULAR##InputHelperMock);

        $##VARIABLE_SINGULAR## = new ##CLASS_SINGULAR##( array('name' => 'Bar') );

        $this->createFormMocks();

        $view = $this->##VARIABLE_SINGULAR##ViewFactory->edit($##VARIABLE_SINGULAR##, null);

        $this->assertViewName( $view, 'bootstrap.##VARIABLE_PLURAL##.edit' );
        $this->assertViewData( $view, '##VARIABLE_SINGULAR##', $##VARIABLE_SINGULAR## );
        $this->assertViewData( $view, 'input', 'Bar');
        $this->assertFormMocks( $view );
    }

    protected function createFilterMocks($input)
    {
        $searchInput = array( 'Fow' => 'Baw' );

        $##VARIABLE_SINGULAR##InputHelperMock = Mockery::mock('\##NAMESPACE##\Services\Input\##CLASS_SINGULAR##InputHelper');
        $##VARIABLE_SINGULAR##InputHelperMock->shouldReceive('getInputForSearch')->once()->with($input)->andReturn($searchInput);
        App::instance('\##NAMESPACE##\Services\Input\##CLASS_SINGULAR##InputHelper', $##VARIABLE_SINGULAR##InputHelperMock);

        $##VARIABLE_SINGULAR##1 = new ##CLASS_SINGULAR##( array( 'name' => 'Foo' ) );
        $##VARIABLE_SINGULAR##2 = new ##CLASS_SINGULAR##( array( 'name' => 'Bar' ) );
        $##VARIABLE_PLURAL## = new \Illuminate\Support\Collection( array( $##VARIABLE_SINGULAR##1, $##VARIABLE_SINGULAR##2 ) );

        $##VARIABLE_SINGULAR##InputHelperMock = Mockery::mock('\##NAMESPACE##\Repositories\Eloquent\Eloquent##CLASS_SINGULAR##Repository');
        $##VARIABLE_SINGULAR##InputHelperMock->shouldReceive('search')->once()->with($searchInput, 25)->andReturn($##VARIABLE_PLURAL##);
        App::instance('\##NAMESPACE##\Repositories\Eloquent\Eloquent##CLASS_SINGULAR##Repository', $##VARIABLE_SINGULAR##InputHelperMock);
    }

    protected function assertFilterMocks($view, $input)
    {
        $this->assertViewData( $view, 'input', $input );
        $this->assertViewDataSize( $view, '##VARIABLE_PLURAL##', 2 );
        $this->assertEquals( 'Foo', $view['##VARIABLE_PLURAL##'][0]->name );
        $this->assertEquals( 'Bar', $view['##VARIABLE_PLURAL##'][1]->name );
    }

    protected function createFormMocks()
    {
        // ...
    }

    protected function assertFormMocks($view)
    {
        // ...
    }

}