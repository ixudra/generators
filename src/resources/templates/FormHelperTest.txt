<?php


use ##NAMESPACE##\Models\##CLASS_SINGULAR##;

class ##CLASS_SINGULAR##FormHelperTest extends BaseUnitTestCase {

    const ##CONSTANT_SINGULAR##_ID_1 = 15;

    const ##CONSTANT_SINGULAR##_ID_2 = 17;


    /**
     * @covers \##NAMESPACE##\Services\Form\##CLASS_SINGULAR##FormHelper::getAllAsSelectList()
     * @covers \##NAMESPACE##\Services\Form\BaseFormHelper::convertToSelectList()
     */
    public function testGetAllAsSelectList()
    {
        $this->setUpMocks();

        $result = App::make('\##NAMESPACE##\Services\Form\##CLASS_SINGULAR##FormHelper')->getAllAsSelectList();

        $this->assertEquals(
            array(
                self::##CONSTANT_SINGULAR##_ID_1     => 'Foo',
                self::##CONSTANT_SINGULAR##_ID_2     => 'Bar'
            ), $result
        );
    }

    /**
     * @covers \##NAMESPACE##\Services\Form\##CLASS_SINGULAR##FormHelper::getAllAsSelectList()
     * @covers \##NAMESPACE##\Services\Form\BaseFormHelper::convertToSelectList()
     */
    public function testGetAllAsSelectList_includesNullValueIfRequired()
    {
        $this->setUpMocks();

        $result = App::make('\##NAMESPACE##\Services\Form\##CLASS_SINGULAR##FormHelper')->getAllAsSelectList(true);

        $this->assertEquals(
            array(
                0                                    => '',
                self::##CONSTANT_SINGULAR##_ID_1     => 'Foo',
                self::##CONSTANT_SINGULAR##_ID_2     => 'Bar'
            ), $result
        );
    }


    protected function setUpMocks()
    {
        $##VARIABLE_SINGULAR##1 = new ##CLASS_SINGULAR##();
        $##VARIABLE_SINGULAR##1->id = self::##CONSTANT_SINGULAR##_ID_1;
        $##VARIABLE_SINGULAR##1->name = 'Foo';

        $##VARIABLE_SINGULAR##2 = new ##CLASS_SINGULAR##();
        $##VARIABLE_SINGULAR##2->id = self::##CONSTANT_SINGULAR##_ID_2;
        $##VARIABLE_SINGULAR##2->name = 'Bar';

        $##VARIABLE_PLURAL## = new \Illuminate\Support\Collection( array( $##VARIABLE_SINGULAR##1, $##VARIABLE_SINGULAR##2 ) );

        $##VARIABLE_SINGULAR##Repository = Mockery::mock('\##NAMESPACE##\Repositories\Eloquent\Eloquent##CLASS_SINGULAR##Repository');
        $##VARIABLE_SINGULAR##Repository->shouldReceive('all')->once()->andReturn($##VARIABLE_PLURAL##);
        App::instance('\##NAMESPACE##\Repositories\Eloquent\Eloquent##CLASS_SINGULAR##Repository', $##VARIABLE_SINGULAR##Repository);
    }

}