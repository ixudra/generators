<?php


use ##NAMESPACE##\Repositories\Eloquent\Eloquent##CLASS_SINGULAR##Repository;
use ##NAMESPACE##\Models\##CLASS_SINGULAR##;

class Eloquent##CLASS_SINGULAR##RepositoryTest extends BaseRepositoryTestCase {

    protected $##VARIABLE_SINGULAR##Repository;


    public function setUp()
    {
        parent::setUp();

        $this->truncateTables('##VARIABLE_PLURAL##');

        $this->##VARIABLE_SINGULAR##Repository = new Eloquent##CLASS_SINGULAR##Repository();
    }


    /**
     * @covers \##NAMESPACE##\Repositories\Eloquent\Eloquent##CLASS_SINGULAR##Repository::all()
     */
    public function testAll()
    {
        $##VARIABLE_SINGULAR##1 = ##CLASS_SINGULAR##::create( array( 'name' => '##CLASS_SINGULAR## 1' ) );
        $##VARIABLE_SINGULAR##2 = ##CLASS_SINGULAR##::create( array( 'name' => '##CLASS_SINGULAR## 2' ) );
        $##VARIABLE_SINGULAR##3 = ##CLASS_SINGULAR##::create( array( 'name' => '##CLASS_SINGULAR## 3' ) );
        $##VARIABLE_SINGULAR##4 = ##CLASS_SINGULAR##::create( array( 'name' => '##CLASS_SINGULAR## 4' ) );
        $##VARIABLE_SINGULAR##5 = ##CLASS_SINGULAR##::create( array( 'name' => '##CLASS_SINGULAR## 5' ) );

        $##VARIABLE_PLURAL## = $this->##VARIABLE_SINGULAR##Repository->all();

        $this->assertCount(5, $##VARIABLE_PLURAL##);
        $this->assertContainsOnlyInstancesOf('\##NAMESPACE##\Models\##CLASS_SINGULAR##', $##VARIABLE_PLURAL##);
    }

    /**
     * @covers \##NAMESPACE##\Repositories\Eloquent\Eloquent##CLASS_SINGULAR##Repository::find()
     */
    public function testFind()
    {
        $##VARIABLE_SINGULAR## = ##CLASS_SINGULAR##::create( array( 'name' => '##CLASS_SINGULAR## 1' ) );

        $result = $this->##VARIABLE_SINGULAR##Repository->find($##VARIABLE_SINGULAR##->id);

        $this->assertInstanceOf('\##NAMESPACE##\Models\##CLASS_SINGULAR##', $result);
        $this->assertEquals('##CLASS_SINGULAR## 1', $result->name);
    }

    /**
     * @covers Eloquent##CLASS_SINGULAR##Repository::find()
     */
    public function testFind_returnsNullIf##CLASS_SINGULAR##DoesNotExist()
    {
        $result = $this->##VARIABLE_SINGULAR##Repository->find(100);

        $this->assertNull($result);
    }

    /**
     * @covers \##NAMESPACE##\Repositories\Eloquent\Eloquent##CLASS_SINGULAR##Repository::findByFilter()
     * @covers \##NAMESPACE##\Repositories\Eloquent\BaseRepository::preProcessFilters()
     * @covers \##NAMESPACE##\Repositories\Eloquent\BaseRepository::applyFilters()
     */
    public function testFindByFilter()
    {
        $##VARIABLE_SINGULAR##1 = ##CLASS_SINGULAR##::create( array( 'name' => '##CLASS_SINGULAR## 1' ) );
        $##VARIABLE_SINGULAR##2 = ##CLASS_SINGULAR##::create( array( 'name' => '##CLASS_SINGULAR## 2' ) );
        $##VARIABLE_SINGULAR##3 = ##CLASS_SINGULAR##::create( array( 'name' => '##CLASS_SINGULAR## 3' ) );
        $##VARIABLE_SINGULAR##4 = ##CLASS_SINGULAR##::create( array( 'name' => '##CLASS_SINGULAR## 4' ) );
        $##VARIABLE_SINGULAR##5 = ##CLASS_SINGULAR##::create( array( 'name' => '##CLASS_SINGULAR## 5' ) );

        $filter = array( 'name' => '##CLASS_SINGULAR## 2' );

        $##VARIABLE_PLURAL## = $this->##VARIABLE_SINGULAR##Repository->findByFilter($filter);

        $this->assertCount(1, $##VARIABLE_PLURAL##);
        $this->assertCollectionWithOnlyInstancesOf('\##NAMESPACE##\Models\##CLASS_SINGULAR##', $##VARIABLE_PLURAL##);
        $this->assertCollectionContains( array($##VARIABLE_SINGULAR##2), $##VARIABLE_PLURAL## );
    }

    /**
     * @covers \##NAMESPACE##\Repositories\Eloquent\Eloquent##CLASS_SINGULAR##Repository::findByFilter()
     * @covers \##NAMESPACE##\Repositories\Eloquent\BaseRepository::preProcessFilters()
     * @covers \##NAMESPACE##\Repositories\Eloquent\BaseRepository::applyFilters()
     */
    public function testFindByFilter_returnsEmptyArrayIfNo##CLASS_PLURAL##MatchFilter()
    {
        $##VARIABLE_SINGULAR##1 = ##CLASS_SINGULAR##::create( array( 'name' => '##CLASS_SINGULAR## 1' ) );
        $##VARIABLE_SINGULAR##2 = ##CLASS_SINGULAR##::create( array( 'name' => '##CLASS_SINGULAR## 2' ) );

        $filter = array( 'name' => '##CLASS_SINGULAR## 3' );

        $##VARIABLE_PLURAL## = $this->##VARIABLE_SINGULAR##Repository->findByFilter($filter);

        $this->assertCount(0, $##VARIABLE_PLURAL##);
    }

//    /**
//     * @covers \##NAMESPACE##\Repositories\Eloquent\Eloquent##CLASS_SINGULAR##Repository::search()
//     */
//    public function testSearch()
//    {
//        $##VARIABLE_SINGULAR##1 = ##CLASS_SINGULAR##::create( array( 'name' => 'Foo_##CLASS_SINGULAR## 1' ) );
//        $##VARIABLE_SINGULAR##2 = ##CLASS_SINGULAR##::create( array( 'name' => 'Bar_##CLASS_SINGULAR## 2' ) );
//        $##VARIABLE_SINGULAR##3 = ##CLASS_SINGULAR##::create( array( 'name' => 'Bar_##CLASS_SINGULAR## 3' ) );
//        $##VARIABLE_SINGULAR##4 = ##CLASS_SINGULAR##::create( array( 'name' => 'Foo_##CLASS_SINGULAR## 4' ) );
//        $##VARIABLE_SINGULAR##5 = ##CLASS_SINGULAR##::create( array( 'name' => 'Foz_##CLASS_SINGULAR## 5' ) );
//
//        $filters = array(
//            'brand_id'          => 1,
//            'query'             => 'Foo'
//        );
//
//        $paginator = $this->##VARIABLE_SINGULAR##Repository->search($filters, 50, true);
//        $##VARIABLE_PLURAL## = $paginator->getCollection();
//
//        $this->assertCount(5, $##VARIABLE_PLURAL##);
//        $this->assertCollectionWithOnlyInstancesOf('\##NAMESPACE##\Models\##CLASS_SINGULAR##', $##VARIABLE_PLURAL##);
//        $this->assertCollectionContains( array($##VARIABLE_SINGULAR##1), $##VARIABLE_PLURAL## );
//    }

    /**
     * @covers \##NAMESPACE##\Repositories\Eloquent\Eloquent##CLASS_SINGULAR##Repository::search()
     */
    public function testSearch_returnsAllResultsIfNoFiltersProvided()
    {
        $##VARIABLE_SINGULAR##1 = ##CLASS_SINGULAR##::create( array( 'name' => 'Foo_##CLASS_SINGULAR## 1' ) );
        $##VARIABLE_SINGULAR##2 = ##CLASS_SINGULAR##::create( array( 'name' => 'Bar_##CLASS_SINGULAR## 2' ) );
        $##VARIABLE_SINGULAR##3 = ##CLASS_SINGULAR##::create( array( 'name' => 'Bar_##CLASS_SINGULAR## 3' ) );
        $##VARIABLE_SINGULAR##4 = ##CLASS_SINGULAR##::create( array( 'name' => 'Foo_##CLASS_SINGULAR## 4' ) );
        $##VARIABLE_SINGULAR##5 = ##CLASS_SINGULAR##::create( array( 'name' => 'Foz_##CLASS_SINGULAR## 5' ) );

        $filters = array();

        $paginator = $this->##VARIABLE_SINGULAR##Repository->search($filters, 50, true);
        $##VARIABLE_PLURAL## = $paginator->getCollection();

        $this->assertCount(5, $##VARIABLE_PLURAL##);
        $this->assertCollectionWithOnlyInstancesOf('\##NAMESPACE##\Models\##CLASS_SINGULAR##', $##VARIABLE_PLURAL##);
    }

    /**
     * @covers \##NAMESPACE##\Repositories\Eloquent\Eloquent##CLASS_SINGULAR##Repository::search()
     */
    public function testSearch_usesPagination()
    {
        $##VARIABLE_SINGULAR##1 = ##CLASS_SINGULAR##::create( array( 'name' => 'Foo_##CLASS_SINGULAR## 1' ) );
        $##VARIABLE_SINGULAR##2 = ##CLASS_SINGULAR##::create( array( 'name' => 'Bar_##CLASS_SINGULAR## 2' ) );
        $##VARIABLE_SINGULAR##3 = ##CLASS_SINGULAR##::create( array( 'name' => 'Bar_##CLASS_SINGULAR## 3' ) );
        $##VARIABLE_SINGULAR##4 = ##CLASS_SINGULAR##::create( array( 'name' => 'Foo_##CLASS_SINGULAR## 4' ) );
        $##VARIABLE_SINGULAR##5 = ##CLASS_SINGULAR##::create( array( 'name' => 'Foz_##CLASS_SINGULAR## 5' ) );

        $filters = array();

        $paginator = $this->##VARIABLE_SINGULAR##Repository->search($filters, 2, true);
        $##VARIABLE_PLURAL## = $paginator->getCollection();

        $this->assertCount(2, $##VARIABLE_PLURAL##);
        $this->assertCollectionWithOnlyInstancesOf('\##NAMESPACE##\Models\##CLASS_SINGULAR##', $##VARIABLE_PLURAL##);
    }

}
